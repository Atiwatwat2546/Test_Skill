#RUN APP > streamlit run app.py


import warnings
import streamlit as st  # ‡πÉ‡∏ä‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á Web App ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ Python
import pandas as pd     # ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏£‡∏≤‡∏á (DataFrame)
import os               # ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞ path ‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö


# ------------------------------
# ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Daily Report (.xlsx)
# ------------------------------
def read_daily_reports(folder):
    all_data = []  # ‡∏™‡∏£‡πâ‡∏≤‡∏á list ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô
    for filename in os.listdir(folder):  # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ó‡∏∏‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
        if filename.startswith("Daily report") and filename.endswith(".xlsx"):
            path = os.path.join(folder, filename)  # ‡∏™‡∏£‡πâ‡∏≤‡∏á path ‡πÄ‡∏ï‡πá‡∏°‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå
            try:
                df = pd.read_excel(path, engine='openpyxl')  # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel
                # ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå ‡πÄ‡∏ä‡πà‡∏ô Daily report_TeamA_John_Doe.xlsx ‚Üí John Doe
                parts = filename.replace(".xlsx", "").split("_")
                team_member = f"{parts[-2]} {parts[-1]}"
                df["Team Member"] = team_member  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡∏°‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

                df.columns = [col.strip() for col in df.columns]  # ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á
                all_data.append(df)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤ list
            except Exception as e:
                st.error(f"‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå {filename} ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")  # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
    if all_data:
        return pd.concat(all_data, ignore_index=True)  # ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô DataFrame ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    return pd.DataFrame()  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô DataFrame ‡πÄ‡∏õ‡∏•‡πà‡∏≤




# ------------------------------
# ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå New Employee (.xlsx)
# ------------------------------
def read_new_employee(filepath):
    try:
        df = pd.read_excel(filepath, engine='openpyxl')  # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel
        df.columns = [col.strip() for col in df.columns]  # ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
        return df
    except Exception as e:
        st.error(f"‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
        return pd.DataFrame()  # ‡∏ñ‡πâ‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏Ñ‡∏∑‡∏ô DataFrame ‡πÄ‡∏õ‡∏•‡πà‡∏≤




# ------------------------------
# ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå‡∏ú‡πà‡∏≤‡∏ô + Role ‡∏à‡∏≤‡∏Å new_df
# ------------------------------
def get_passed_candidates_with_roles(daily_df, new_df):
    # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà Interview = "yes" ‡πÅ‡∏•‡∏∞ Status = "pass"
    passed = daily_df[
        (daily_df["Interview"].str.strip().str.lower() == "yes") &
        (daily_df["Status"].str.strip().str.lower() == "pass")
    ].copy()

    passed["Candidate Name"] = passed["Candidate Name"].str.strip()  # ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠

    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° lookup key ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ö‡∏ö lowercase ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô
    new_df["Employee Name"] = new_df["Employee Name"].str.strip()
    new_df["lookup_key"] = new_df["Employee Name"].str.lower()
    passed["lookup_key"] = passed["Candidate Name"].str.lower()

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á dictionary ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö map ‡∏ä‡∏∑‡πà‡∏≠ ‚Üí Role ‡πÅ‡∏•‡∏∞ Join Date
    name_to_role = dict(zip(new_df["lookup_key"], new_df["Role"]))
    name_to_join = dict(zip(new_df["lookup_key"], pd.to_datetime(new_df["Join Date"], errors='coerce')))

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    passed["Employee Name"] = passed["Candidate Name"]
    passed["Role"] = passed["lookup_key"].map(name_to_role)
    passed["Join Date"] = passed["lookup_key"].map(name_to_join)

    # ‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    return passed[["Employee Name", "Join Date", "Role", "Team Member"]]




# ------------------------------
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö dd-MMM-YYYY
# ------------------------------
def format_dates(df):
    for col in df.columns:
        if pd.api.types.is_datetime64_any_dtype(df[col]):
            df[col] = df[col].dt.strftime("%d-%b-%Y")
        elif df[col].dtype == 'object':
            try:
                # ‡∏õ‡∏¥‡∏î warning ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á
                with warnings.catch_warnings():
                    warnings.simplefilter(action='ignore', category=UserWarning)
                    parsed = pd.to_datetime(df[col], errors='coerce')  # ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏° format=...
                if parsed.notna().sum() > 0:
                    df[col] = parsed.dt.strftime("%d-%b-%Y")
            except:
                continue
    return df





# ------------------------------
# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Streamlit App
# ------------------------------
st.title("üìã Dashboard")  # ‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ

# ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå
daily_folder = "daily_reports"  # ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö Daily Report
new_employee_file = "new_employee/New Employee_YYYYMM.xlsx"  # ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà


# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
daily_df = read_daily_reports(daily_folder)  # ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏ó‡∏µ‡∏°
new_df = read_new_employee(new_employee_file)  # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà

# ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö
with st.expander("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Daily Reports"):  # ‡∏Ç‡∏¢‡∏≤‡∏¢/‡∏¢‡πà‡∏≠‡πÑ‡∏î‡πâ
    daily_df_display = format_dates(daily_df.copy())
    daily_df_display.index = range(1, len(daily_df_display) + 1)
    st.dataframe(daily_df_display)  # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á

with st.expander("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å New Employee"):
    new_df_display = format_dates(new_df.copy())
    new_df_display.index = range(1, len(new_df_display) + 1)
    st.dataframe(new_df_display)


# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
passed_df = get_passed_candidates_with_roles(daily_df, new_df)

st.header("‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå")
if not passed_df.empty:
    passed_df_display = format_dates(passed_df.copy())
    passed_df_display.index = range(1, len(passed_df_display) + 1)
    st.dataframe(passed_df_display)  # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
else:
    st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ô‡∏ú‡πà‡∏≤‡∏ô




